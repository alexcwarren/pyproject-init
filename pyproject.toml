[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pyproject-init"
dynamic = ["version"]
description = 'A CLI tool to automate Python project creation with modern best practices.'
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = ["cli", "project-template", "automation", "cookiecutter", "hatch"]
authors = [{ name = "Alex C Warren", email = "alexcwarren.info@gmail.com" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = ["cookiecutter>=2.1.1", "click>=8.1.3"]

[project.scripts]
pyproject-init = "pyproject_init.cli:cli"

[project.urls]
Documentation = "https://github.com/alexcwarren/pyproject-init#readme"
Issues = "https://github.com/alexcwarren/pyproject-init/issues"
Source = "https://github.com/alexcwarren/pyproject-init"

[tool.hatch.version]
path = "src/pyproject_init/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "cookiecutter>=2.1.1",
  "jinja2-time",
  "click>=8.1.3",
  "pytest",
  "pytest-cov",
  "pytest-randomly",
  "ruff",
  "mypy",
]

[tool.hatch.envs.default.scripts]
check-fix = "ruff check src tests scripts --fix"
format = "ruff format src tests scripts"
lint-all = ["format", "check-fix"]
typecheck = "mypy src tests scripts"
test = "pytest {args:tests}"
all = ["lint-all", "typecheck", "test"]
cov = "pytest --cov-pyproject_init --cov-report=term-missing --cov-report=html {args:tests}"
clean = "python scripts/clean.py {args}"

[tool.hatch.envs.lint]
dependencies = ["ruff"]

[tool.hatch.envs.lint.scripts]
lint = "ruff check src tests scripts"
format-check = "ruff format src tests scripts --check"
all = ["lint", "format-check"]

[tool.hatch.envs.type]
dependencies = ["mypy"]

[tool.hatch.envs.type.scripts]
typecheck = "mypy src tests scripts"

[tool.hatch.envs.test]
dependencies = ["pytest"]

[tool.hatch.envs.test.scripts]
test = "pytest {arg:tests}"

[tool.hatch.envs.coverage]
dependencies = ["pytest"]

[tool.hatch.envs.coverage.scripts]
cov = "pytest --cov-pyproject_init --cov-report=term-missing --cov-report=html {args:tests}"

[tool.coverage.run]
source_pkgs = ["pyproject_init", "tests", "scripts"]
branch = true
parallel = true
omit = ["src/pyproject_init/__about__.py"]

[tool.coverage.paths]
pyproject_init = ["src/pyproject_init", "*/pyproject-init/src/pyproject_init"]
tests = ["tests", "*/pyproject-init/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.ruff]
line-length = 89
target-version = "py310"
exclude = ["src/pyproject_init/templates/**"]

[tool.ruff.lint]
select = [
  "E",   # pycodestyle error
  "W",   # pycodestyle warning
  "F",   # Pyflakes
  "I",   # isort
  "N",   # pep8-naming
  "D",   # pydocstyle
  "UP",  # pyupgrade
  "S",   # flake8-bandit
  "B",   # flake8-bugbear
  "A",   # flake8-builtins
  "C4",  # flake8-comprehensions
  "T20", # flake8-print
  "PTH", # flake8-pathlib
  "PIE", # flake8-pie
  "RSE", # flake8-raise
  "RET", # flake8-return
  "SIM", # flake8-simplify
  "ANN", # flake8-annotations
]
ignore = [
  "D100", "D104", "D105", "D106", "D107", "D203", "D213", "D406", "D407", # Docstring rules
  "ANN101", "ANN102", # missing type annotation for self, cls
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
  "S101", # flake8-bandit: use of assert
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = "src/pyproject_init/templates"

[tool.pytest.ini_options]
norecursedirs = ["src/pyproject_init/templates"]
