[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pyproject-init"
dynamic = ["version"]
description = 'A CLI tool to automate Python project creation with modern best practices.'
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = ["cli", "project-template", "automation", "cookiecutter", "hatch"]
authors = [
  { name = "Alex C Warren", email = "alexcwarren.info@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "cookiecutter>=2.1.1",
  "click>=8.1.3"
]

[project.scripts]
pyproject-init = "pyproject_init.cli:cli"

[project.urls]
Documentation = "https://github.com/alexcwarren/pyproject-init#readme"
Issues = "https://github.com/alexcwarren/pyproject-init/issues"
Source = "https://github.com/alexcwarren/pyproject-init"

[tool.hatch.version]
path = "src/pyproject_init/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "cookiecutter>=2.1.1",
  "jinja2-time",
  "click>=8.1.3",
  "pytest",
  "pytest-cov",
  "pytest-randomly",
  "ruff",
  "mypy"
]

[tool.hatch.envs.default.scripts]
lint = "ruff check ."
typecheck = "mypy ."
test = "pytest {args:tests}"
cov = "pytest --cov-pyproject_init --cov-report=term-missing --cov-report=html {args:tests}"
all = [
  "lint",
  "typecheck",
  "test"
]

[tool.hatch.envs.lint]
dependencies = [
  "ruff"
]

[tool.hatch.envs.lint.scripts]
lint = "ruff check src tests"
format = "ruff format src tests"
format-check = "ruff format src tests --check"


[tool.hatch.envs.type]
dependencies = [
  "mypy"
]

[tool.hatch.envs.type.scripts]
typecheck = "mypy ."

[tool.coverage.run]
source_pkgs = ["pyproject_init", "tests"]
branch = true
parallel = true
omit = [
  "src/pyproject_init/__about__.py",
]

[tool.coverage.paths]
pyproject_init = ["src/pyproject_init", "*/pyproject-init/src/pyproject_init"]
tests = ["tests", "*/pyproject-init/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E", "W", "F", "I", "N", "D", "UP", "S", "B", "A", "C4", "T20", "PTH", "PIE", "RSE", "RET", "SIM", "ANN",
]
ignore = [
    "D100", "D104", "D105", "D106", "D107", "D203", "D213", "D406", "D407",
    "ANN101", "ANN102",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
